#!/bin/bash

# This script is based on :
#  O. Tange (2011): GNU Parallel - The Command-Line Power Tool, 
# ;login: The USENIX Magazine, February 2011:42-47.
#

export NODE=$(hostname)
export CONFIG_DIR=/etc/cloudsh
export DEFAULT_LXC_CONFIG=${CONFIG_DIR}/defaults.lxc
export DEFAULT_QEMU_CONFIG=${CONFIG_DIR}/defaults.qemu
export LOG_DIR=/var/log/cloudsh
export DATE_FORMAT="+%Y-%m-%d %H:%M:%S"

which pvesh > /dev/null 2>&1
test $? -ne 0 && echo "pvesh have to be installed and available in your PATH" && exit 1
which lxc-attach > /dev/null 2>&1
test $? -ne 0 && echo "lxc-attach have to be installed and available in your PATH" && exit 1
which jq > /dev/null 2>&1
test $? -ne 0 && echo "jq have to be installed and available in your PATH" && exit 1
which parallel > /dev/null 2>&1
test $? -ne 0 && echo "parallel have to be installed and available in your PATH" && exit 1

function usage {
    echo "Usage: cloudsh COMMAND [NAME]"
    echo ""
    echo "cloudsh provides several basics commands for managing VM / containers in ProxmoxVE."
    echo ""
    echo "Available Commands:"
    echo "  create           Create all VMs and containers found in ${CONFIG_DIR}"
    echo "  status           Get the status of all VMs and containers found in ${CONFIG_DIR}"
    echo "  start            Start all VMs and containers found in ${CONFIG_DIR}"
    echo "  stop             Stop all VMs and containers found in ${CONFIG_DIR}"
    echo "  delete           Delete all VMs and containers found in ${CONFIG_DIR}"
    echo "  help <command>   Provides help on the specified command"
    exit 1
}

function completion {
  cat <<'EOT'
_cloudsh()
{
    local cur prev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="completion create start stop delete status help"

    case "${prev}" in
        create|start|stop|delete|status)
            local hostnames=$(find /etc/cloudsh -name '*.conf' -exec basename -s .conf {} \;)
            COMPREPLY=( $(compgen -W "${hostnames}" -- ${cur}) )
            return 0
            ;;
        *)
            ;;
    esac

    if [[ $COMP_CWORD -eq 1 ]]; then
       COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    else
       COMPREPLY=()
    fi
    return 0
}
complete -F _cloudsh cloudsh
EOT
}

function logdate {
    date "+%Y-%m-%d %H:%M:%S"
}
export -f logdate

function errormsg {
    >&2 echo $*
}
export -f errormsg

function is_vmid_available {
    output=$(pvesh get /cluster/nextid -vmid $1 2>&1)
    result=$?
    OLDIFS=$IFS
    IFS="\n"
    echo ${output} | tr -d '"' | head -2 | tail -1
    IFS=${OLDIFS}
    return ${result}
}
export -f is_vmid_available

function type_name {
    case $1 in
        lxc)
            echo "container"
            ;;
        *)
            echo "VM"
            ;;
    esac
}
export -f type_name

function get_vmid_by_hostname {
    pvesh get /cluster/resources -type=vm 2>/dev/null | jq ".[] | select(.name == \"$1\") | .vmid"
}
export -f get_vmid_by_hostname

function get_status {
    pvesh get /nodes/${NODE}/$1/$2/status/current 2>/dev/null | jq '.status' | tr -d '"'
}
export -f get_status

function get_all_configfile_to_create {
    for file in $(ls ${CONFIG_DIR}/*.json); do
        hostname=$(cat ${file} | jq -r '.params.hostname')
        if [ -z "$(get_vmid_by_hostname ${hostname})" ]; then
            echo ${file}
        fi
    done
}
export -f get_all_configfile_to_create

function format_params {
    eval "declare -A params="${1#*=}
    for param in "${!params[@]}"; do
        echo -n " --${param} \"${params[${param}]}\""
    done
}
export -f format_params

function run_command {
    COMMAND=$1
    shift
    CONFIG=$1
    if [ -z "${COMMAND}" ]; then
        errormsg "Missing command !"
        return 1
    fi
    if [[ !"${COMMAND}}" =~ ^(create|start|stop|delete|status)$ ]]; then
        errormsg "Invalid command '${COMMAND}' !"
        return 1
    fi
    if [ ! -r "${CONFIG}" ]; then
        errormsg "Cannot read configuration file : '${CONFIG}'"
        return 1
    fi
    type=$(cat ${CONFIG} | jq -r '.type')
    if [ "${type}" == 'null' ]; then
        errormsg "Missing type in '${CONFIG}' : expected lxc or qemu !"
        return 1
    elif [[ !"${type}}" =~ ^(lxc|qemu)$ ]]; then
        errormsg "Invalid type '${type}' in '${CONFIG}' : expected lxc or qemu !"
        return 1
    fi
    ${COMMAND} ${type} $*
}
export -f run_command

function create {
    TYPE=$1
    shift
    create_${TYPE} $*
}
export -f create

function start {
    TYPE=$1
    CONFIG=$2
    if [ ${TYPE} == "lxc" ]; then
        hostname=$(cat ${CONFIG} | jq -r '.params.hostname')
    else
        hostname=$(cat ${CONFIG} | jq -r '.params.name')
    fi
    vmid=$(get_vmid_by_hostname ${hostname})
    if [ -z "${vmid}" ]; then
        errormsg "Unknown $(type_name ${TYPE}) '${hostname}'"
        return 1
    fi
    if [ "$(get_status ${TYPE} ${vmid})" == "stopped" ]; then
        echo "Start $(type_name ${TYPE}) ${hostname} (${vmid})..."
        pvesh create /nodes/${NODE}/${TYPE}/${vmid}/status/start >/dev/null 2>&1
    fi
}
export -f start

function stop {
    TYPE=$1
    CONFIG=$2
    if [ ${TYPE} == "lxc" ]; then
        hostname=$(cat ${CONFIG} | jq -r '.params.hostname')
    else
        hostname=$(cat ${CONFIG} | jq -r '.params.name')
    fi
    vmid=$(get_vmid_by_hostname ${hostname})
    if [ -z "${vmid}" ]; then
        errormsg "Unknown $(type_name ${TYPE}) '${hostname}'"
        return 1
    fi
    if [ "$(get_status ${TYPE} ${vmid})" == "stopped" ]; then
        echo "Stop $(type_name ${TYPE}) ${hostname} (${vmid})..."
        pvesh create /nodes/${NODE}/${TYPE}/${vmid}/status/stop >/dev/null 2>&1
    fi
}
export -f stop

function delete {
    TYPE=$1
    CONFIG=$2
    if [ ${TYPE} == "lxc" ]; then
        hostname=$(cat ${CONFIG} | jq -r '.params.hostname')
    else
        hostname=$(cat ${CONFIG} | jq -r '.params.name')
    fi
    vmid=$(get_vmid_by_hostname ${hostname})
    if [ -z "${vmid}" ]; then
        errormsg "Unknown $(type_name ${TYPE}) '${hostname}'"
        return 1
    fi
    if [ "$(get_status ${TYPE} ${vmid})" != "stopped" ]; then
        echo "Stop $(type_name ${TYPE}) ${hostname} (${vmid})..."
        pvesh create /nodes/${NODE}/${TYPE}/${vmid}/status/stop >/dev/null 2>&1
    fi
    echo "Delete $(type_name ${TYPE}) ${hostname} (${vmid})..."
    pvesh delete /nodes/${NODE}/${TYPE}/${vmid} >/dev/null 2>&1
}
export -f delete

function status {
    TYPE=$1
    CONFIG=$2
    if [ "${TYPE}" == "lxc" ]; then
        hostname=$(cat ${CONFIG} | jq -r '.params.hostname')
    else
        hostname=$(cat ${CONFIG} | jq -r '.params.name')
    fi
    vmid=$(get_vmid_by_hostname ${hostname})
    if [ -z "${vmid}" ]; then
        printf "│ %-4s │ %-30s │ %-10s │\n" "" ${hostname} "unknown"
    else
        printf "│ %-4s │ %-30s │ %-10s │\n" ${vmid} ${hostname} $(get_status ${TYPE} ${vmid})
    fi
}
export -f status

################################################################################
# LXC specific functions
#

function create_lxc {
    CONFIG=$1

    # Initialize log file
    if [ -n "$2" ]; then
        LOG_FILE=$2
    else
        LOG_FILE="${LOG_DIR}/$(basename -s .conf ${CONFIG}).log"
    fi

    # Declare an associative array for the configuration of the container
    declare -A config

    # Load default configuration for LXC containers
    default_config_content=$(cat ${DEFAULT_LXC_CONFIG})
    init_script=$(echo ${default_config_content} | jq -r '.init_script')
    init_script_default_env=$(echo ${default_config_content} | jq -r '.init_script_default_env')
    init_script_env=$(echo ${default_config_content} | jq -r '.init_script_env')
    for param in $(echo ${default_config_content} | jq -r '.params|to_entries[]|.key'); do
        if [ "${param}" != "null" ]; then
            config["${param}"]=$(echo ${default_config_content} | jq -r --arg param "${param}" '.params|.[$param]')
        fi
    done

    # Load specific configuration of the container
    config_content=$(cat ${CONFIG})
    if [ $(echo ${config_content} | jq -r '.init_script') != 'null' ]; then
        init_script=$(echo ${config_content} | jq -r '.init_script')
    fi
    if [ $(echo ${config_content} | jq -r '.init_script_default_env') != 'null' ]; then
        init_script_default_env=$(echo ${config_content} | jq -r '.init_script_default_env')
    fi
    if [ $(echo ${config_content} | jq -r '.init_script_env') != 'null' ]; then
        init_script_env=$(echo ${config_content} | jq -r '.init_script_env')
    fi
    for param in $(echo ${config_content} | jq -r '.params|to_entries[]|.key'); do
        if [ "${param}" != "null" ]; then
            config["${param}"]=$(echo ${config_content} | jq -r --arg param "${param}" '.params|.[$param]')
        fi
    done

    # Validate hostname
    hostname=${config['hostname']}
    if [ -n "$(get_vmid_by_hostname ${hostname})" ]; then
        errormsg "VM or Container ${hostname} already exists"
        return 1
    fi

    # Validate VMID
    vmid=$(echo ${config_content} | jq -r '.vmid')
    output=$(is_vmid_available ${vmid})
    if [ $? != 0 ]; then
        errormsg -n "Error while creating container ${hostname} ... "
        errormsg ${output}
        return 1
    fi

    # If log file already exists then rotate it
    if [ -f ${LOG_FILE} ]; then
        mv ${LOG_FILE} ${LOG_FILE}.1
    fi

    echo "###############################################################################" >> ${LOG_FILE} 2>&1
    echo "$(logdate) Create container ${hostname} (${vmid})..." >> ${LOG_FILE} 2>&1
    echo  >> ${LOG_FILE} 2>&1
    eval "pvesh create /nodes/${NODE}/lxc --vmid ${vmid} $(format_params "$(declare -p config)") >> ${LOG_FILE} 2>&1"
    if [ $? != 0 ]; then
        return 1
    fi
    echo  >> ${LOG_FILE} 2>&1

    echo "###############################################################################" >> ${LOG_FILE} 2>&1
    echo "$(logdate) Start container ${hostname} (${vmid})..." >> ${LOG_FILE} 2>&1
    echo  >> ${LOG_FILE} 2>&1
    pvesh create /nodes/${NODE}/lxc/${vmid}/status/start >> ${LOG_FILE} 2>&1
    while [ "$(get_status lxc ${vmid})" != "running" ]; do
        echo "Waiting for ${hostname} to be running..." >> ${LOG_FILE} 2>&1
        sleep 3
    done
    echo  >> ${LOG_FILE} 2>&1

    echo "###############################################################################" >> ${LOG_FILE} 2>&1
    echo "$(logdate) Initialize container ${hostname} (${vmid})..." >> ${LOG_FILE} 2>&1
    echo  >> ${LOG_FILE} 2>&1
    if [ -r "${init_script}" ]; then
        <${init_script_default_env} lxc-attach -n ${vmid} -- /bin/sh -c "/bin/cat > /tmp/init.env" >> ${LOG_FILE} 2>&1
        if [ -n "${init_script_env}" ]; then
            <${init_script_env} lxc-attach -n ${vmid} -- /bin/sh -c "/bin/cat >> /tmp/init.env" >> ${LOG_FILE} 2>&1
        fi
        <${init_script} lxc-attach -n ${vmid} -- /bin/sh -c "/bin/cat > /tmp/init.sh && chmod +x /tmp/init.sh" >> ${LOG_FILE} 2>&1
        lxc-attach -n ${vmid} -- /tmp/init.sh >> ${LOG_FILE} 2>&1
    fi
    echo  >> ${LOG_FILE} 2>&1

    echo "$(logdate) Container ${hostname} (${vmid}) created !" >> ${LOG_FILE} 2>&1
    echo "Container ${hostname} (${vmid}) created !"
}
export -f create_lxc


################################################################################
# QEMU specific functions
#

function create_qemu {
    CONFIG=$1

    # Initialize log file
    if [ -n "$2" ]; then
        LOG_FILE=$2
    else
        LOG_FILE="${LOG_DIR}/$(basename -s .conf ${CONFIG}).log"
    fi

    # Declare an associative array for the configuration of the VM
    declare -A config

    # Load default configuration for VMs
    default_config_content=$(cat ${DEFAULT_QEMU_CONFIG})
    for param in $(echo ${default_config_content} | jq -r '.params|to_entries[]|.key'); do
        if [ "${param}" != "null" ]; then
            config["${param}"]=$(echo ${default_config_content} | jq -r --arg param "${param}" '.params|.[$param]')
        fi
    done

    # Load specific configuration of the VM
    config_content=$(cat ${CONFIG})
    for param in $(echo ${config_content} | jq -r '.params|to_entries[]|.key'); do
        if [ "${param}" != "null" ]; then
            config["${param}"]=$(echo ${config_content} | jq -r --arg param "${param}" '.params|.[$param]')
        fi
    done

    # Validate hostname
    hostname=${config['hostname']}
    if [ -n "$(get_vmid_by_hostname ${hostname})" ]; then
        errormsg "VM or container ${hostname} already exists"
        return 1
    fi

    # Validate VMID
    vmid=$(echo ${config_content} | jq -r '.vmid')
    output=$(is_vmid_available ${vmid})
    if [ $? != 0 ]; then
        errormsg -n "Error while creating VM ${hostname} ... "
        errormsg ${output}
        return 1
    fi

    # If log file already exists then rotate it
    if [ -f ${LOG_FILE} ]; then
        mv ${LOG_FILE} ${LOG_FILE}.1
    fi

    echo "###############################################################################" >> ${LOG_FILE} 2>&1
    echo "$(logdate) Create VM ${hostname} (${vmid})..." >> ${LOG_FILE} 2>&1
    echo  >> ${LOG_FILE} 2>&1
    eval "pvesh create /nodes/${NODE}/qemu --vmid ${vmid} $(format_params "$(declare -p config)") >> ${LOG_FILE} 2>&1"
    if [ $? != 0 ]; then
        return 1
    fi
    echo  >> ${LOG_FILE} 2>&1

    echo "###############################################################################" >> ${LOG_FILE} 2>&1
    echo "$(logdate) Start VM ${hostname} (${vmid})..." >> ${LOG_FILE} 2>&1
    echo  >> ${LOG_FILE} 2>&1
    pvesh create /nodes/${NODE}/qemu/${vmid}/status/start >> ${LOG_FILE} 2>&1
    while [ "$(get_status qemu ${vmid})" != "running" ]; do
        echo "Waiting for ${hostname} to be running..." >> ${LOG_FILE} 2>&1
        sleep 3
    done
    echo  >> ${LOG_FILE} 2>&1

    echo "$(logdate) VM ${hostname} (${vmid}) created !" >> ${LOG_FILE} 2>&1
    echo "VM ${hostname} (${vmid}) created !"
}
export -f create_qemu


################################################################################
# Main function
#

if [ -z "$1" ]
then
  usage
fi
COMMAND=$1
shift
NAME=$1

case ${COMMAND} in
    completion)
        completion $*
        ;;
    create)
        if [ -n "${NAME}" ]; then
            run_command create ${CONFIG_DIR}/${NAME}.json /dev/stdout
        else
            mkdir -p ${LOG_DIR}
            parallel -j8 --delay 4 --joblog ${LOG_DIR}/cloudsh.log run_command create ::: $(get_all_configfile_to_create)
        fi
        ;;
    start)
        if [ -n "${NAME}" ]; then
            run_command start ${CONFIG_DIR}/${NAME}.json
        else
            parallel -j8 run_command start ::: $(ls ${CONFIG_DIR}/*.json)
        fi
        ;;
    stop)
        if [ -n "${NAME}" ]; then
            run_command stop ${CONFIG_DIR}/${NAME}.json
        else
            parallel -j8 run_command stop ::: $(ls ${CONFIG_DIR}/*.json)
        fi
        ;;
    delete)
        if [ -n "${NAME}" ]; then
            run_command delete ${CONFIG_DIR}/${NAME}.json
        else
            parallel -j8 run_command delete ::: $(ls ${CONFIG_DIR}/*.json)
        fi
        ;;
    status)
        echo "┌──────┬────────────────────────────────┬────────────┐"
        printf "│ %-4s │ %-30s │ %-10s │\n" "VMID" "HOSTNAME" "STATUS"
        echo "├──────┼────────────────────────────────┼────────────┤"
        if [ -n "${NAME}" ]; then
            run_command status ${CONFIG_DIR}/${NAME}.json
        else
            parallel -j20 --delay=0.5 run_command status ::: $(ls ${CONFIG_DIR}/*.json)
        fi
        echo "└──────┴────────────────────────────────┴────────────┘"
        ;;
    help)
        usage
        ;;
    *)
        errormsg "Invalid command !"
        usage
        ;;
esac
